#!/usr/bin/python3

import subprocess
import json

# Execute the command-line command
command = """
gh api graphql -f query='
  query{
    node(id: "PVT_kwHOABF2LM4AhB76") {
        ... on ProjectV2 {
          items(first: 20) {
            nodes{
              fieldValues(last: 5) {
                nodes{                
                  ... on ProjectV2ItemFieldTextValue {
                    field {
                      ... on ProjectV2FieldCommon {
                        name
                      }
                    }
                  }
                  ... on ProjectV2ItemFieldDateValue {
                    field {
                      ... on ProjectV2FieldCommon {
                        name
                      }
                    }
                  }
                  ... on ProjectV2ItemFieldSingleSelectValue {
                    name
                    field {
                      ... on ProjectV2FieldCommon {
                        name
                      }
                    }
                  }
                }              
              }
              content{              
                ... on DraftIssue {
                  title
                }
                ...on Issue {
                  title
                }
              }
            }
          }
        }
      }
    }'
"""
result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

# Check if the command executed successfully
if result.returncode == 0:
    # Decode the output from bytes to string
    output = result.stdout.decode("utf-8")
    
    # Parse the output as JSON
    json_data = json.loads(output)
    
    statuses = set()
    status_counts = {}
    
    items = (json_data["data"]["node"]["items"]["nodes"])
    for item in items:
        status = item["fieldValues"]["nodes"][-1]["name"]
        statuses.add(status)

        # Increment the count for the current status
        status_counts[status] = status_counts.get(status, 0) + 1

        # print(item["fieldValues"]["nodes"][-1]["name"])
        # print("-")
        # print((item["content"]["title"]))
        # print("\n--------\n")
    
    for status in statuses: 
        if status != "Done":
            print(status, status_counts[status])

else:
    # Handle command execution error
    error_message = result.stderr.decode('utf-8')
    print(f"Error: {error_message}")